设计模式
面向对象设计的几个基本原则
面向抽象
所谓面向抽象编程是指设计一个类时，不让该类面向具体的类，而是面向抽象类或接口即所设计类中的重要数据是抽象类或接口声明中的变量，而不是具体类中的变量。
例如:
当设计一个柱体时的设计原理:
为了使柱体可以有不同的bottom不可以是一个具体类声明的变量，这样柱体类就会依赖该具体类，缺乏弹性，难以应对需求的变化，应该使用抽象类或是接口。
开闭原则
所谓开闭原则(open-closed principle)就是让设计对扩展开放，对修改关闭，怎么理解对扩展开放对修改关闭?实际上这句话的本质是说当一个设计中增加新的模块时，不需要修改现有的模块，在给出一个设计师，应当首先考虑到用户需求的变化，将应对用户需求的变化的部分设计为对扩展开放，对修改关闭，而设计的核心部分是经过精心考虑后确定下来的基本结构，这部分应当是对修改关闭的，即不能因为用户需求的变化而发生变化，因为这部分不是用来应对需求变化的，如果遵循了开闭原则那么设计一定是易维护的，因为在设计中增加新的模块时，不必修改设计中的核心模块，



该设计中的Geometry和Pillar就是系统中对修改关闭的部分，而Geometry的子类是对扩展开放的部分，当向系统在增加任何Geometry的子类时(对扩展开放)，不必修改Pillar，就可以使用pillar创建出具有Geometry新子类指定的底的柱体
当设计一个系统时，经常需要面向抽象来考虑系统的总体设计，不要考虑具体类，这样就容易设计出满足开闭原则的系统会给，在程序设计好后，首先对abstract类的修改关闭，否则一旦修改abstract类，比如在增加一个abstarct方法，那么abstract类所有的子类都需要作出修改，应当对增加abstract类的子类开放，即在程序中在增加子类时，不需要修改其他面向抽象类而设计的重要类.
多用组合少用继承原则
概述：方法复用的俩中最常用的技术是类继承和对象组合
 继承与复用
子类继承父类的方法作为自己的一个方法，就好像他们是在子类中直接声明一样，可以被子类中自己声明的任何实例方法调用，也就是说父类的方法可以被子类以继承的方法复用
优点:
子类可以重写父类的方法，即易于修改或扩展那些被复用的方法。
缺点:
1子类从父类继承的方法在编译时就确定下来了，无法在运行期间改变从父类继承的方法的行为。
2 子类和父类的关系是强耦合的关系，也就说当父类的方法行为改变时，必然导致子类发生变化
3 通过继承进行复用也称 白盒 复用，其缺点是父类的内部细节对于子类而言是可见的
组合与复用
一个Leiden成员变量可以是java允许的任何数据类型，因此一个类可以把对象作为自己的成员变量，如果用这样的类创建对象，那么该对象中就会有其他对象，也就是说该对象将其他对象作为自己的组成部分(也就是has-A),或者说该对象有几个对象组合而成。
如果一个对象a组合了对象b，那么对象a就可以委托对象b调用其方法，即对象a以组合的方式复用对象b的方法
优点:
1 通过组合对象来复用方法也成为 黑盒  复用，因为当前对象只能委托所包含的对象调用其方法，这样一来，当前对象所包含对象方法的细节对当前对象是不可见的。
2 对象与所包含的对象属于弱耦合关系，因为如果修改当前对性爱那个所包含对象类的代码，不必修改当前对象类的代码。
3 当前对象可以在运行时动态指定所包含的对象，例如，假设com是一个接口，该接口中有一个computer方法，那么下列Computer类的对象可以在运行时动态指定所包含的对象，即运行期间computer类的实例可调用setCom(Com com)方法得到其中的com变量存放任何实现com接口的对象的引用
缺点:
1容易导致系统中的对象过多
2 为了能组合多个对象，必须仔细的对接口进行定义
原则:
多用组合，少用继承：
因为在许多设计中，人们希望系统中的类之间是低耦合的关系，而不是强耦合，

高内聚-低耦合原则
如果类中的方法是一组相关的行为，则称该类是高内聚的，反之成为低内聚的，高内聚力与类的维护
所谓低耦合是尽量不要让一个类含有太多其他类的实例引用。以避免修改系统中一部分会影响到其他部分


命令模式
概述:
GOF -- Design Patterns 
命令模式:(别名:动作，事务)
将一个请求封装成一个对象，从而使用户可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作
Command Pattern(Action Transaction )
Encapsulate a request as an object , thereby letting parameterize clients with different requests , queue or log requests and support undoable operations

命令模式是关于怎样处理一个对象请求另一个对象调用其方法完成某项任务的一个成熟的模式，这里称提出请求的对象为请求者，被请求的对象为接收者

模式的结构与使用
命令模式的uml类图
